class edge:
    def __init__(self, src , nbr, wt):
        self.src = src
        self.nbr = nbr 
        self. wt = wt 


graph = {}
v= int(input())
e = int(input())

for i in range(v):
    graph[i] = []

for i in range(e):
    a, b , c = map(int, input().split(" "))
    graph[a].append(edge(a , b , c))
    graph[b].append(edge(b , a , c))

s = int(input())
d = int(input())

ans = []
visited = [0]*v
def dfs(graph , src , des , visited, path):
    if src == des:
        ans.append(path)
        return 

    visited[src] = 1
    for child in graph[src]:
        if visited[child.nbr] == 0:
            path += str(child.nbr)
            dfs(graph, child.nbr, des, visited, path)
            path = path[:len(path)-1]


    visited[src] = 0
    return

dfs(graph ,s , d , visited, "0")
print(ans)

 
    
# 7
# 8
# 0 3 40
# 0 1 10
# 1 2 10
# 2 3 10
# 3 4 2
# 4 5 3
# 4 6 8
# 5 6 3
# 0
# 6
    

    
    
    
